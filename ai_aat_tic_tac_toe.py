# -*- coding: utf-8 -*-
"""AI_AAT_Tic-TAc-Toe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11xE0KugaCkT5wvnJgkKcHSFdWsUi1u6g
"""

def nextMove(player, board):
    opponent = 'O' if player == 'X' else 'X'

    def can_win(board, player, r, c):
        board[r][c] = player
        win = (
            (board[r][0] == board[r][1] == board[r][2] == player) or
            (board[0][c] == board[1][c] == board[2][c] == player) or
            (board[0][0] == board[1][1] == board[2][2] == player) or
            (board[0][2] == board[1][1] == board[2][0] == player)
        )
        board[r][c] = '_'
        return win

    # Step 1: Check for winning move
    for r in range(3):
        for c in range(3):
            if board[r][c] == '_':
                if can_win(board, player, r, c):
                    print(r, c)
                    return

    # Step 2: Block opponent's winning move
    for r in range(3):
        for c in range(3):
            if board[r][c] == '_':
                if can_win(board, opponent, r, c):
                    print(r, c)
                    return

    # Step 3: Take center if available
    if board[1][1] == '_':
        print(1, 1)
        return

    # Step 4: Take any corner if available
    for r, c in [(0, 0), (0, 2), (2, 0), (2, 2)]:
        if board[r][c] == '_':
            print(r, c)
            return

    # Step 5: Take any side if available
    for r, c in [(0, 1), (1, 0), (1, 2), (2, 1)]:
        if board[r][c] == '_':
            print(r, c)
            return

if __name__ == '__main__':
    player = input().strip()
    board_string = input().strip()

    board = [list(board_string[i:i+3]) for i in range(0, 9, 3)]

    nextMove(player, board)

